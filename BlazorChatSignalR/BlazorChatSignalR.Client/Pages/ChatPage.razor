@page "/chat"
@using BlazorChatSignalR.Client.ChatServices
@using ChatModels
@using Microsoft.AspNetCore.SignalR.Client
@inject ChatService ChatService
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<PageTitle>BlazingChat</PageTitle>
<div class="zalo-container">
    <div class="chat-window">
        <div class="chat-header">
            <h2>BlazingChat</h2>
            <button type="button" class="btn btn-warning float-end" @onclick="Logout">Logout</button>
        </div>
        <div class="chat-messages">
            @foreach (var chat in ChatMessages)
            {
                <div class="message @GetMessageClass(chat)">
                    <div>
                        <strong>@chat.Sender</strong>
                        <span class="text-muted" style="font-size: 0.8em;">@chat.Timestamp.ToString("HH:mm:ss")</span>
                    </div>
                    <div>@chat.Message</div>
                </div>
            }
        </div>
        <div class="chat-input">
            <input type="text" class="form-control" @bind="chat.Message" @onkeypress="HandleKeyPress" placeholder="Enter message here..." />
            <button class="btn btn-primary mt-2" @onclick="SendChat">Send Message</button>
        </div>
    </div>
</div>

@code {
    private Chat chat = new Chat { Sender = "User1", Receiver = "User2" };
    private HubConnection? hubConnection;
    public List<Chat> ChatMessages { get; set; } = new List<Chat>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<Chat>("ReceiveMessage", (chat) =>
        {
            if (chat.Sender == this.chat.Receiver || chat.Receiver == this.chat.Receiver || chat.Sender == this.chat.Sender)
            {
                ChatMessages.Add(chat);
                InvokeAsync(() => StateHasChanged());
            }
        });

        await hubConnection.StartAsync();
        var httpClient = new HttpClient();
        var chatApiUrl = NavigationManager.ToAbsoluteUri("/api/Chat");
        ChatMessages = await httpClient.GetFromJsonAsync<List<Chat>>(chatApiUrl);
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async Task SendChat()
    {
        if (!string.IsNullOrWhiteSpace(chat.Message))
        {
            chat.Timestamp = DateTime.Now;
            await hubConnection!.SendAsync("SendMessage", chat);
            ChatMessages.Add(new Chat { Sender = chat.Sender, Receiver = chat.Receiver, Message = chat.Message, Timestamp = chat.Timestamp });
            chat.Message = string.Empty;
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(chat.Message))
        {
            await SendChat();
        }
    }

    private async Task Logout()
    {
await hubConnection!.StopAsync();
        NavigationManager.NavigateTo("/");
    }

    private string GetMessageClass(Chat chat)
    {
        return chat.Sender == this.chat.Sender ? "sent" : "received";
    }
}

<style>
    .zalo-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        background-color: #f0f0f0;
    }

    .chat-window {
        display: flex;
        flex-direction: column;
        flex: 1;
        background-color: white;
        border: 1px solid #ccc;
    }

    .chat-header {
        padding: 10px;
        background-color: #007bff;
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .chat-messages {
        flex: 1;
        padding: 10px;
        overflow-y: auto;
    }

    .message {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
    }

    .sent {
        background-color: #d1e7dd;
        text-align: right;
    }

    .received {
        background-color: #f8d7da;
        text-align: left;
    }

    .chat-input {
        padding: 10px;
        border-top: 1px solid #ccc;
        display: flex;
        align-items: center;
    }

        .chat-input input {
            flex: 1;
            margin-right: 10px;
        }
</style>